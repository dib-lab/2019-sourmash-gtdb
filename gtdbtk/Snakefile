import os
import random

filter_prefixes=['TOBG']
genomes_extension='.fna'
scaled=10000
build_ksizes=[51]
require_taxonomy_bool=0

all_files = []
for root, dirs, files in os.walk('genomes/', topdown=False):
    for name in files:
        if name.endswith(genomes_extension):
            filename = os.path.join(root, name)
            if filename.startswith('./'): filename = filename[2:]
            all_files.append(filename)

rule all:
    input:
        "outputs/gtdbtk/",
        [ i + '.sig' for i in all_files ],
        expand("outputs/{prefix}-genomes-k{k}.lca.json.gz", k=build_ksizes,
               prefix=filter_prefixes),
        expand("outputs/{prefix}-oddities-k{k}.txt", k=build_ksizes,
                prefix=filter_prefixes),
        expand("outputs/{prefix}-oddities-k{k}.examine.txt", k=build_ksizes,
                prefix=filter_prefixes)

rule sigs:
    input:
        "{genome}"
    output:
        "{genome}.sig"
    params:
        extension=genomes_extension
    shell:
        "sourmash compute -k 21,31,51 --scaled=1000 {input} -o {output} --merge=$(basename {input} {params.extension})"

rule gtdbtk_gather_matches:
    """
    this rule require the gtdbtk databases. The tool finds the database by 
    using a path specified in a file in the environment. I predownloaded the 
    databases and placed them in the required location.
    The path is in this file:
    .snakemake/conda/1261315d/etc/conda/activate.d/gtdbtk.sh
    """
    input: "genomes"
    output: directory("outputs/gtdbtk/")
    params:  outdir = "outputs/gtdbtk"
    conda: "env-gtdbtk.yml"
    shell:'''
    gtdbtk classify_wf --genome_dir {input} --out_dir {params.outdir} --cpus 8 --extension fna
    '''

rule make_lineages_csv:
    input:
        "outputs/gtdbtk/"
    output:
        "outputs/{filter_prefix}-lineages.csv"
    shell:
        "../gtdbtk-to-lineages-csv.py outputs/gtdbtk/ {output} --filter-prefix={wildcards.filter_prefix:q}"

rule make_lca_db:
    input:
        "outputs/{prefix}-lineages.csv"
    output:
        "outputs/{prefix}-genomes-k{ksize}.lca.json.gz"
    params:
        scaled=scaled,
        require_taxonomy_arg="--require-taxonomy"
    shell:
        "sourmash lca index {params.require_taxonomy_arg} {input} {output} --traverse-directory genomes -k {wildcards.ksize} --scaled={params.scaled}"

rule make_oddities_txt:
    input:
        "outputs/{prefix}-genomes-k{ksize}.lca.json.gz"
    output:
        "outputs/{prefix}-oddities-k{ksize,[0-9]+}.txt"
    shell:
        "../find-oddities.py {input} --lowest-rank=superkingdom --minimum-hashes=10 --prefix=outputs/{wildcards.prefix}-oddities-k{wildcards.ksize} > {output}"

rule make_oddities_examine_txt:
    input:
        "outputs/{prefix}-oddities-k{ksize}.txt",
        "outputs/{prefix}-genomes-k{ksize}.lca.json.gz"
    output:
        "outputs/{prefix}-oddities-k{ksize,[0-9]+}.examine.txt"
    shell:
        "../find-oddities-examine.py outputs/{wildcards.prefix}-oddities-k{wildcards.ksize}.csv genomes/ --percent-threshold=95 --length-threshold=0 > {output}"
